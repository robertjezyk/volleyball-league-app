// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Local
// datasource db {
//   provider = "sqlite"
//   url      = env("DATABASE_URL")
// }

// Planet Scale
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model League {
  id      String @id @default(uuid())
  type    String @unique
  season  String
  Team    Team[]
  matches Match[]

  @@unique([id, type])
}

model Team {
  id          String       @id @default(uuid())
  name        String
  badge       String?
  leagueType  String?
  description String?
  address     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt

  // Reference to the League model
  leagueId     String?
  league       League?       @relation(fields: [leagueId, leagueType], references: [id, type])
  TeamStanding TeamStanding?

  // Matches where the team plays as the home team
  homeMatches  Match[]      @relation("homeMatches")
  
  // Matches where the team plays as the away team
  awayMatches  Match[]      @relation("awayMatches")

  // Add index for the relation fields
  @@index([leagueId, leagueType], name: "team_league_index")
}


model TeamStanding {
  id             Int      @id @default(autoincrement())
  team           Team     @relation(fields: [teamStandingId], references: [id])
  points         Int      @default(0)
  played         Int      @default(0)
  won            Int      @default(0)
  lost           Int      @default(0)
  setsFor        Int      @default(0)
  setsAgainst    Int      @default(0)
  pointsFor      Int      @default(0)
  pointsAgainst  Int      @default(0)
  teamStandingId String   @unique @map("_teamStandingId")
  updatedAt      DateTime @default(now()) @updatedAt

  @@index([teamStandingId], name: "teamStanding_teamStandingId_index")
}

model Match {
  id         String   @id @default(uuid())
  date       DateTime @default(now())
  leagueType String?
  homeTeamId String
  awayTeamId String
  homeTeam   Team     @relation("homeMatches", fields: [homeTeamId], references: [id])
  awayTeam   Team     @relation("awayMatches", fields: [awayTeamId], references: [id])
  setsHome   Int
  setsAway   Int
  pointsHome Int
  pointsAway Int
  leaguePointsHome Int
  leaguePointsAway Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@unique([homeTeamId, awayTeamId])

  // Reference to the League model
  leagueId         String
  league           League?   @relation(fields: [leagueId, leagueType], references: [id, type])

  @@index([homeTeamId], name: "match_homeTeamId_index")
  @@index([awayTeamId], name: "match_awayTeamId_index")
  @@index([leagueId, leagueType], name: "match_leagueId_index")
}
